{"version":3,"file":"options.bundle.js","sources":["../../utils/logger.ts","../../config/session.ts","../../options.ts"],"sourcesContent":["// utils/logger.ts\n// Logging utility wrapping loguru\n\n/**\n * Logger class for consistent logging throughout the extension\n */\nexport class Logger {\n  constructor(private module: string) {}\n  \n  /**\n   * Log debug message\n   */\n  debug(message: string, data?: any): void {\n    console.debug(`[${this.module}] ${message}`, data !== undefined ? data : '');\n  }\n  \n  /**\n   * Log info message\n   */\n  info(message: string, data?: any): void {\n    console.info(`[${this.module}] ${message}`, data !== undefined ? data : '');\n  }\n  \n  /**\n   * Log warning message\n   */\n  warning(message: string, data?: any): void {\n    console.warn(`[${this.module}] ${message}`, data !== undefined ? data : '');\n  }\n\n  /**\n   * Alias for warning method (to match loguru API)\n   */\n  warn(message: string, data?: any): void {\n    this.warning(message, data);\n  }\n  \n  /**\n   * Log error message\n   */\n  error(message: string, data?: any): void {\n    console.error(`[${this.module}] ${message}`, data !== undefined ? data : '');\n  }\n}\n\n/**\n * Loguru mock for browser extension use\n */\nclass LoguruMock {\n  /**\n   * Get logger for a module\n   */\n  getLogger(module: string): Logger {\n    return new Logger(module);\n  }\n}\n\n// Export singleton instance\nexport const loguru = new LoguruMock();\n","// config/session.ts\n// Session configuration management\n\nimport { RawSessionConfig, SessionConfig } from './types';\nimport { loguru } from '../utils/logger';\n\nconst logger = loguru.getLogger('session-config');\n\n// Default configuration values\nexport const DEFAULT_CONFIG: RawSessionConfig = {\n    idleThresholdMinutes: 5,\n    minSessionDurationSeconds: 30,\n    requireContinuousActivity: true,  // If true, resets timer on idle\n    logPartialSessions: false,        // If true, logs sessions even if under minimum duration\n    activityUpdateIntervalSeconds: 1  // How often to update active time\n};\n\n/**\n * Load session configuration from storage\n */\nexport async function loadSessionConfig(): Promise<RawSessionConfig> {\n    try {\n        const items = await chrome.storage.sync.get('sessionConfig');\n        const config = { ...DEFAULT_CONFIG, ...items.sessionConfig };\n        logger.debug('Loaded session config', config);\n        return config;\n    } catch (error) {\n        logger.error('Error loading session config', error);\n        return DEFAULT_CONFIG;\n    }\n}\n\n/**\n * Save session configuration to storage\n */\nexport async function saveSessionConfig(config: RawSessionConfig): Promise<void> {\n    try {\n        // Ensure values are the correct type\n        const sanitizedConfig: RawSessionConfig = {\n            idleThresholdMinutes: Number(config.idleThresholdMinutes),\n            minSessionDurationSeconds: Number(config.minSessionDurationSeconds),\n            requireContinuousActivity: Boolean(config.requireContinuousActivity),\n            logPartialSessions: Boolean(config.logPartialSessions),\n            activityUpdateIntervalSeconds: Number(config.activityUpdateIntervalSeconds)\n        };\n        \n        await chrome.storage.sync.set({ sessionConfig: sanitizedConfig });\n        logger.debug('Saved session config', sanitizedConfig);\n    } catch (error) {\n        logger.error('Error saving session config', error);\n        throw error;\n    }\n}\n\n/**\n * Convert configuration to milliseconds for internal use\n */\nexport function getConfigurationInMs(config: RawSessionConfig): SessionConfig {\n    return {\n        idleThreshold: config.idleThresholdMinutes * 60 * 1000,\n        minSessionDuration: config.minSessionDurationSeconds * 1000,\n        activityUpdateInterval: config.activityUpdateIntervalSeconds * 1000,\n        requireContinuousActivity: config.requireContinuousActivity,\n        logPartialSessions: config.logPartialSessions\n    };\n}\n","// options.ts\nimport { loadSessionConfig, DEFAULT_CONFIG, saveSessionConfig } from './config/session';\nimport { RawSessionConfig } from './config/types';\n\n// Helper to set form values\nfunction setFormValues(settings: {\n  githubRepo?: string;\n  githubToken?: string;\n  sessionConfig?: RawSessionConfig;\n}): void {\n  // GitHub settings\n  if (settings.githubRepo) {\n    (document.getElementById('repo') as HTMLInputElement).value = settings.githubRepo;\n  }\n  if (settings.githubToken) {\n    // Don't show the actual token, just indicate it's set\n    (document.getElementById('token') as HTMLInputElement).placeholder = '••••••••••••••••••••••';\n  }\n\n  // Session settings\n  (document.getElementById('idleThreshold') as HTMLInputElement).value = \n    String(settings.sessionConfig?.idleThresholdMinutes ?? DEFAULT_CONFIG.idleThresholdMinutes);\n    \n  (document.getElementById('minDuration') as HTMLInputElement).value = \n    String(settings.sessionConfig?.minSessionDurationSeconds ?? DEFAULT_CONFIG.minSessionDurationSeconds);\n    \n  (document.getElementById('requireContinuous') as HTMLInputElement).checked = \n    settings.sessionConfig?.requireContinuousActivity ?? DEFAULT_CONFIG.requireContinuousActivity;\n    \n  (document.getElementById('logPartial') as HTMLInputElement).checked = \n    settings.sessionConfig?.logPartialSessions ?? DEFAULT_CONFIG.logPartialSessions;\n}\n\n// Helper to get form values\nfunction getFormValues(): {\n  githubRepo: string;\n  githubToken: string;\n  sessionConfig: RawSessionConfig;\n} {\n  return {\n    githubRepo: (document.getElementById('repo') as HTMLInputElement).value.trim(),\n    githubToken: (document.getElementById('token') as HTMLInputElement).value.trim(),\n    sessionConfig: {\n      idleThresholdMinutes: Number((document.getElementById('idleThreshold') as HTMLInputElement).value),\n      minSessionDurationSeconds: Number((document.getElementById('minDuration') as HTMLInputElement).value),\n      requireContinuousActivity: (document.getElementById('requireContinuous') as HTMLInputElement).checked,\n      logPartialSessions: (document.getElementById('logPartial') as HTMLInputElement).checked,\n      activityUpdateIntervalSeconds: DEFAULT_CONFIG.activityUpdateIntervalSeconds // Keep default\n    }\n  };\n}\n\n// Display status message\nfunction showStatus(message: string, isError = false): void {\n  const status = document.getElementById('status');\n  if (!status) return;\n  \n  status.textContent = message;\n  status.className = `status ${isError ? 'error' : 'success'}`;\n\n  // Clear status after 3 seconds if it's a success message\n  if (!isError) {\n    setTimeout(() => {\n      if (status) {\n        status.textContent = '';\n        status.className = 'status';\n      }\n    }, 3000);\n  }\n}\n\n// Validate settings before saving\nasync function validateSettings(settings: {\n  githubRepo: string;\n  githubToken: string;\n  sessionConfig: RawSessionConfig;\n}): Promise<void> {\n  // Validate repository format\n  if (!/^[\\w-]+\\/[\\w-]+$/.test(settings.githubRepo)) {\n    throw new Error('Invalid repository format. Use username/repository');\n  }\n\n  // Validate the token by making a test API call\n  const response = await fetch(`https://api.github.com/repos/${settings.githubRepo}`, {\n    headers: {\n      'Authorization': `token ${settings.githubToken}`,\n      'Accept': 'application/vnd.github.v3+json'\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error('Invalid token or repository. Please check your credentials.');\n  }\n\n  // Validate session settings\n  const { sessionConfig } = settings;\n  if (sessionConfig.idleThresholdMinutes < 1 || sessionConfig.idleThresholdMinutes > 60) {\n    throw new Error('Idle threshold must be between 1 and 60 minutes');\n  }\n  if (sessionConfig.minSessionDurationSeconds < 1 || sessionConfig.minSessionDurationSeconds > 300) {\n    throw new Error('Minimum session duration must be between 10 and 300 seconds');\n  }\n}\n\n// Save settings\nasync function saveSettings(settings: {\n  githubRepo: string;\n  githubToken: string;\n  sessionConfig: RawSessionConfig;\n}): Promise<void> {\n  await chrome.storage.sync.set({\n    githubRepo: settings.githubRepo,\n    githubToken: settings.githubToken\n  });\n\n  await saveSessionConfig(settings.sessionConfig);\n}\n\n// Initialize options page\ndocument.addEventListener('DOMContentLoaded', async () => {\n  try {\n    // Load current settings\n    const [storageItems, sessionConfig] = await Promise.all([\n      chrome.storage.sync.get(['githubRepo', 'githubToken']),\n      loadSessionConfig()\n    ]);\n\n    // Combine settings and display them\n    setFormValues({\n      ...(storageItems as {\n        githubRepo?: string;\n        githubToken?: string;\n      }),\n      sessionConfig\n    });\n\n    // Add save button handler\n    const saveButton = document.getElementById('save');\n    if (saveButton) {\n      saveButton.addEventListener('click', async () => {\n        try {\n          const settings = getFormValues();\n          await validateSettings(settings);\n          await saveSettings(settings);\n          showStatus('Settings saved successfully!');\n        } catch (error) {\n          showStatus(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`, true);\n        }\n      });\n    }\n\n  } catch (error) {\n    showStatus(`Error loading settings: ${error instanceof Error ? error.message : 'Unknown error'}`, true);\n  }\n});\n"],"names":[],"mappings":"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"}