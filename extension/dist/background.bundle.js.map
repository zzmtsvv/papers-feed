{"version":3,"file":"background.bundle.js","sources":["../node_modules/gh-store-client/dist/index.mjs","../../papers/types.ts","../../utils/logger.ts","../../papers/manager.ts","../../utils/session-service.ts","../../utils/popup-manager.ts","../../source-integration/source-manager.ts","../../source-integration/metadata-extractor.ts","../../source-integration/base-source.ts","../../source-integration/arxiv/index.ts","../../source-integration/openreview/index.ts","../../source-integration/registry.ts","../../background.ts"],"sourcesContent":["var f=(i=>(i.GH_STORE=\"gh-store\",i.STORED_OBJECT=\"stored-object\",i.DEPRECATED=\"deprecated-object\",i.UID_PREFIX=\"UID:\",i.ALIAS_TO_PREFIX=\"ALIAS-TO:\",i))(f||{});var m=class{constructor(e={}){this.cache=new Map,this.maxSize=e.maxSize??1e3,this.ttl=e.ttl??1e3*60*60,this.accessOrder=[]}get(e){let t=this.cache.get(e);if(t){if(Date.now()-t.lastAccessed>this.ttl){this.cache.delete(e),this.removeFromAccessOrder(e);return}return t.lastAccessed=Date.now(),this.updateAccessOrder(e),t.issueNumber}}set(e,t,r){if(this.cache.size>=this.maxSize&&!this.cache.has(e)){let s=this.accessOrder[this.accessOrder.length-1];s&&(this.cache.delete(s),this.removeFromAccessOrder(s))}this.cache.set(e,{issueNumber:t,lastAccessed:Date.now(),createdAt:r.createdAt,updatedAt:r.updatedAt}),this.updateAccessOrder(e)}remove(e){this.cache.delete(e),this.removeFromAccessOrder(e)}clear(){this.cache.clear(),this.accessOrder=[]}getStats(){return{size:this.cache.size,maxSize:this.maxSize,ttl:this.ttl}}shouldRefresh(e,t){let r=this.cache.get(e);return r?t>r.updatedAt:!0}updateAccessOrder(e){this.removeFromAccessOrder(e),this.accessOrder.unshift(e)}removeFromAccessOrder(e){let t=this.accessOrder.indexOf(e);t>-1&&this.accessOrder.splice(t,1)}};var y=\"0.11.1\";var d=class{constructor(e,t,r={}){if(this.token=e,this.repo=t,!this.repo)throw new Error(\"Repository is required\");this.config={baseLabel:r.baseLabel??\"stored-object\",uidPrefix:r.uidPrefix??\"UID:\",reactions:{processed:r.reactions?.processed??\"+1\",initialState:r.reactions?.initialState??\"rocket\"}},this.cache=new m(r.cache)}isPublic(){return this.token===null}async fetchFromGitHub(e,t={}){let r=new URL(`https://api.github.com/repos/${this.repo}${e}`);t.params&&(Object.entries(t.params).forEach(([a,n])=>{r.searchParams.append(a,n)}),delete t.params);let s={Accept:\"application/vnd.github.v3+json\"};if(t.headers){let a=t.headers;Object.keys(a).forEach(n=>{s[n]=a[n]})}this.token&&(s.Authorization=`token ${this.token}`);let i=await fetch(r.toString(),{...t,headers:s});if(!i.ok)throw new Error(`GitHub API error: ${i.status}`);return i.json()}createCommentPayload(e,t,r){let s={_data:e,_meta:{client_version:y,timestamp:new Date().toISOString(),update_mode:\"append\",issue_number:t}};return r&&(s.type=r),s}async getObject(e){let t=this.cache.get(e),r;if(t)try{r=await this.fetchFromGitHub(`/issues/${t}`),this._verifyIssueLabels(r,e)||(this.cache.remove(e),r=void 0)}catch{this.cache.remove(e)}if(!r){let c=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:[\"gh-store\",this.config.baseLabel,`${this.config.uidPrefix}${e}`].join(\",\"),state:\"closed\"}});if(!c||c.length===0)throw new Error(`No object found with ID: ${e}`);r=c[0]}if(!r?.body)throw new Error(`Invalid issue data received for ID: ${e}`);let s=JSON.parse(r.body),i=new Date(r.created_at),a=new Date(r.updated_at);return this.cache.set(e,r.number,{createdAt:i,updatedAt:a}),{meta:{objectId:e,label:`${this.config.uidPrefix}${e}`,issueNumber:r.number,createdAt:i,updatedAt:a,version:await this._getVersion(r.number)},data:s}}async createObject(e,t,r=[]){if(!this.token)throw new Error(\"Authentication required for creating objects\");let s=`${this.config.uidPrefix}${e}`,i=[\"gh-store\",this.config.baseLabel,s,...r],a=await this.fetchFromGitHub(\"/issues\",{method:\"POST\",body:JSON.stringify({title:`Stored Object: ${e}`,body:JSON.stringify(t,null,2),labels:i})});this.cache.set(e,a.number,{createdAt:new Date(a.created_at),updatedAt:new Date(a.updated_at)});let n=this.createCommentPayload(t,a.number,\"initial_state\"),c=await this.fetchFromGitHub(`/issues/${a.number}/comments`,{method:\"POST\",body:JSON.stringify({body:JSON.stringify(n,null,2)})});return await this.fetchFromGitHub(`/issues/comments/${c.id}/reactions`,{method:\"POST\",body:JSON.stringify({content:this.config.reactions.processed})}),await this.fetchFromGitHub(`/issues/comments/${c.id}/reactions`,{method:\"POST\",body:JSON.stringify({content:this.config.reactions.initialState})}),await this.fetchFromGitHub(`/issues/${a.number}`,{method:\"PATCH\",body:JSON.stringify({state:\"closed\"})}),{meta:{objectId:e,label:s,issueNumber:a.number,createdAt:new Date(a.created_at),updatedAt:new Date(a.updated_at),version:1},data:t}}_verifyIssueLabels(e,t){let r=new Set([this.config.baseLabel,`${this.config.uidPrefix}${t}`]);return e.labels.some(s=>r.has(s.name))}async updateObject(e,t){if(!this.token)throw new Error(\"Authentication required for updating objects\");let r=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:[this.config.baseLabel,`${this.config.uidPrefix}${e}`].join(\",\"),state:\"all\"}});if(!r||r.length===0)throw new Error(`No object found with ID: ${e}`);let s=r[0],i=this.createCommentPayload(t,s.number);return await this.fetchFromGitHub(`/issues/${s.number}/comments`,{method:\"POST\",body:JSON.stringify({body:JSON.stringify(i,null,2)})}),await this.fetchFromGitHub(`/issues/${s.number}`,{method:\"PATCH\",body:JSON.stringify({state:\"open\"})}),this.getObject(e)}async listAll(){let e=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:this.config.baseLabel,state:\"closed\"}}),t={};for(let r of e)if(!r.labels.some(s=>s.name===\"archived\"))try{let s=this._getObjectIdFromLabels(r),i=JSON.parse(r.body),a={objectId:s,label:s,issueNumber:r.number,createdAt:new Date(r.created_at),updatedAt:new Date(r.updated_at),version:await this._getVersion(r.number)};t[s]={meta:a,data:i}}catch{continue}return t}async listUpdatedSince(e){let t=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:this.config.baseLabel,state:\"closed\",since:e.toISOString()}}),r={};for(let s of t)if(!s.labels.some(i=>i.name===\"archived\"))try{let i=this._getObjectIdFromLabels(s),a=JSON.parse(s.body),n=new Date(s.updated_at);if(n>e){let c={objectId:i,label:i,issueNumber:s.number,createdAt:new Date(s.created_at),updatedAt:n,version:await this._getVersion(s.number)};r[i]={meta:c,data:a}}}catch{continue}return r}async getObjectHistory(e){let t=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:[this.config.baseLabel,`${this.config.uidPrefix}${e}`].join(\",\"),state:\"all\"}});if(!t||t.length===0)throw new Error(`No object found with ID: ${e}`);let r=t[0],s=await this.fetchFromGitHub(`/issues/${r.number}/comments`),i=[];for(let a of s)try{let n=JSON.parse(a.body),c=\"update\",u,p={client_version:\"legacy\",timestamp:a.created_at,update_mode:\"append\"};typeof n==\"object\"?\"_data\"in n?(c=n.type||\"update\",u=n._data,p=n._meta||p):\"type\"in n&&n.type===\"initial_state\"?(c=\"initial_state\",u=n.data):u=n:u=n,i.push({timestamp:a.created_at,type:c,data:u,commentId:a.id})}catch{continue}return i}async _getVersion(e){return(await this.fetchFromGitHub(`/issues/${e}/comments`)).length+1}_getObjectIdFromLabels(e){for(let t of e.labels)if(t.name!==this.config.baseLabel&&t.name.startsWith(this.config.uidPrefix))return t.name.slice(this.config.uidPrefix.length);throw new Error(`No UID label found with prefix ${this.config.uidPrefix}`)}};var h={baseLabel:\"stored-object\",uidPrefix:\"UID:\",reactions:{processed:\"+1\",initialState:\"rocket\"},retries:{maxAttempts:3,backoffFactor:2},rateLimit:{maxRequestsPerHour:1e3}};function H(o){return{...h,...o,reactions:{...h.reactions,...o.reactions},retries:{...h.retries,...o.retries},rateLimit:{...h.rateLimit,...o.rateLimit}}}function N(o){return/^gh[ps]_[a-zA-Z0-9]{36}$/.test(o)}function J(o){return/^[\\w-]+\\/[\\w-]+$/.test(o)}var g=class extends Error{constructor(e){super(e),this.name=\"ConfigError\"}},O=class extends g{constructor(e=\"Invalid GitHub token format\"){super(e),this.name=\"TokenError\"}},w=class extends g{constructor(e=\"Invalid repository format. Use owner/repo\"){super(e),this.name=\"RepoError\"}};var E={level:\"info\",silent:!1},A={error:3,warn:2,info:1,debug:0},b=class{constructor(e,t={}){this.entries=[];this.moduleName=e,this.config={...E,...t}}debug(e,t){this.log(\"debug\",e,t)}info(e,t){this.log(\"info\",e,t)}warn(e,t){this.log(\"warn\",e,t)}error(e,t){this.log(\"error\",e,t)}log(e,t,r){if(A[e]<A[this.config.level])return;let s={timestamp:new Date().toISOString(),level:e,module:this.moduleName,message:t,metadata:r};this.entries.push(s)}getEntries(){return[...this.entries]}clearEntries(){this.entries=[]}configure(e){this.config={...this.config,...e}}getConfig(){return{...this.config}}};var l=new b(\"CanonicalStore\"),S=class extends d{constructor(e,t,r={}){super(e,t,r),this.canonicalizeByDefault=r.canonicalize??!0,this.visitedIds=new Set,this._ensureSpecialLabels().catch(s=>{l.warn(`Could not ensure special labels exist: ${s.message}`)})}async _ensureSpecialLabels(){let e=[{name:\"gh-store\",color:\"6f42c1\",description:\"All issues managed by gh-store system\"}];try{let t=await this.fetchFromGitHub(\"/labels\"),r=new Set(t.map(s=>s.name));for(let s of e)if(!r.has(s.name))try{await this.fetchFromGitHub(\"/labels\",{method:\"POST\",body:JSON.stringify(s)})}catch(i){l.warn(`Could not create label ${s.name}: ${i.message}`)}}catch(t){l.warn(`Could not ensure special labels exist: ${t.message}`)}}async resolveCanonicalObjectId(e,t=5){return this.visitedIds=new Set,this._resolveCanonicalIdInternal(e,t)}async _resolveCanonicalIdInternal(e,t){if(t<=0)return l.warn(`Maximum alias resolution depth reached for ${e}`),e;if(this.visitedIds.has(e))return l.warn(`Circular reference detected for ${e}`),e;this.visitedIds.add(e);try{let r=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:`UID:${e},ALIAS-TO:*`,state:\"all\"}});if(r&&r.length>0){for(let s of r)for(let i of s.labels)if(i.name.startsWith(\"ALIAS-TO:\")){let a=i.name.slice(\"ALIAS-TO:\".length);return a===e?(l.error(`Self-referential alias detected for ${e}`),e):this._resolveCanonicalIdInternal(a,t-1)}}}catch(r){l.warn(`Error resolving canonical ID for ${e}: ${r.message}`)}return e}async getObject(e,t={}){if(t.canonicalize??this.canonicalizeByDefault){let s=await this.resolveCanonicalObjectId(e);return s!==e&&l.info(`Object ${e} resolved to canonical object ${s}`),super.getObject(s)}else return super.getObject(e)}async createAlias(e,t){let r;try{let i=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:`UID:${e},stored-object`,state:\"all\"}});if(!i||i.length===0)throw new Error(`Source object not found: ${e}`);r=i[0]}catch(i){throw new Error(`Error finding source object: ${i.message}`)}try{let i=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:`UID:${t},stored-object`,state:\"all\"}});if(!i||i.length===0)throw new Error(`Target object not found: ${t}`)}catch(i){throw new Error(`Error finding target object: ${i.message}`)}try{let i=await this.fetchFromGitHub(`/issues/${r.number}/labels`);for(let a of i)if(a.name.startsWith(\"ALIAS-TO:\"))throw new Error(`Object ${e} is already an alias`)}catch(i){throw i.message.includes(\"already an alias\")?i:new Error(`Error checking existing aliases: ${i.message}`)}let s=`ALIAS-TO:${t}`;try{try{await this.fetchFromGitHub(\"/labels\",{method:\"POST\",body:JSON.stringify({name:s,color:\"fbca04\"})})}catch(i){l.warn(`Could not create label ${s}: ${i.message}`)}return await this.fetchFromGitHub(`/issues/${r.number}/labels`,{method:\"POST\",body:JSON.stringify({labels:[s]})}),{success:!0,sourceId:e,targetId:t}}catch(i){throw new Error(`Failed to create alias: ${i.message}`)}}async findAliases(e){let t={};try{if(e){let r=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:`ALIAS-TO:${e}`,state:\"all\"}});for(let s of r||[]){let i=this._extractObjectIdFromLabels(s);i&&(t[i]=e)}}else{let r=await this.fetchFromGitHub(\"/issues\",{method:\"GET\",params:{labels:\"ALIAS-TO:*\",state:\"all\"}});for(let s of r||[]){let i=this._extractObjectIdFromLabels(s);if(i){for(let a of s.labels)if(a.name.startsWith(\"ALIAS-TO:\")){let n=a.name.slice(\"ALIAS-TO:\".length);t[i]=n;break}}}}return t}catch(r){return l.warn(`Error finding aliases: ${r.message}`),{}}}_extractObjectIdFromLabels(e){for(let t of e.labels)if(t.name.startsWith(\"UID:\"))return t.name.slice(\"UID:\".length);throw new Error(\"No UID label found with prefix UID:\")}};export{S as CanonicalStoreClient,g as ConfigError,h as DEFAULT_CONFIG,d as GitHubStoreClient,f as LabelNames,w as RepoError,O as TokenError,H as mergeConfig,J as validateRepo,N as validateToken};\n//# sourceMappingURL=index.mjs.map","// extension/papers/types.ts\n// Updated for heartbeat-based session tracking\n\nimport type { Json } from 'gh-store-client';\n\n/**\n * Paper metadata from any source\n */\nexport interface PaperMetadata {\n  // Source identifier\n  sourceId: string;\n  \n  // Paper identifier within the source\n  paperId: string;\n  \n  // Full URL to the paper\n  url: string;\n  \n  // Paper title\n  title: string;\n  \n  // Authors (comma-separated)\n  authors: string;\n  \n  // Abstract or summary\n  abstract: string;\n  \n  // When this paper was first added\n  timestamp: string;\n  \n  // Publication date\n  publishedDate: string;\n  \n  // Tags or categories\n  tags: string[];\n  \n  // User-assigned rating (novote, thumbsup, thumbsdown)\n  rating: string;\n  \n  // Allow additional source-specific properties\n  [key: string]: any;\n}\n\n/**\n * Reading session data - updated for heartbeat tracking\n */\nexport interface ReadingSessionData {\n  // Session identifier\n  session_id: string;\n  \n  // Paper identifiers\n  source_id?: string;\n  paper_id?: string;\n  \n  // Session timing\n  start_time: string;\n  end_time: string;\n  \n  // Heartbeat data\n  heartbeat_count: number;\n  \n  // Duration in seconds (derived from heartbeat count)\n  duration_seconds: number;\n  \n  // Legacy properties for backward compatibility\n  idle_seconds?: number;\n  total_elapsed_seconds?: number;\n}\n\n/**\n * Interaction data\n */\nexport interface Interaction {\n  // Type of interaction (reading_session, annotation, rating)\n  type: string;\n  \n  // When interaction occurred\n  timestamp: string;\n  \n  // Additional data\n  data: Json;\n}\n\n/**\n * Interaction log\n */\nexport interface InteractionLog {\n  // Source identifier\n  sourceId: string;\n  \n  // Paper identifier within the source\n  paperId: string;\n  \n  // List of interactions\n  interactions: Interaction[];\n\n  // Index signature to make it compatible with Json type\n  [key: string]: string | Interaction[] | any;\n}\n\n/**\n * Type guard for interaction log\n */\nexport function isInteractionLog(data: unknown): data is InteractionLog {\n  const log = data as InteractionLog;\n  return (\n    typeof log === 'object' &&\n    log !== null &&\n    typeof log.sourceId === 'string' &&\n    typeof log.paperId === 'string' &&\n    Array.isArray(log.interactions)\n  );\n}\n","// utils/logger.ts\n// Logging utility wrapping loguru\n\n/**\n * Logger class for consistent logging throughout the extension\n */\nexport class Logger {\n  constructor(private module: string) {}\n  \n  /**\n   * Log debug message\n   */\n  debug(message: string, data?: any): void {\n    console.debug(`[${this.module}] ${message}`, data !== undefined ? data : '');\n  }\n  \n  /**\n   * Log info message\n   */\n  info(message: string, data?: any): void {\n    console.info(`[${this.module}] ${message}`, data !== undefined ? data : '');\n  }\n  \n  /**\n   * Log warning message\n   */\n  warning(message: string, data?: any): void {\n    console.warn(`[${this.module}] ${message}`, data !== undefined ? data : '');\n  }\n\n  /**\n   * Alias for warning method (to match loguru API)\n   */\n  warn(message: string, data?: any): void {\n    this.warning(message, data);\n  }\n  \n  /**\n   * Log error message\n   */\n  error(message: string, data?: any): void {\n    console.error(`[${this.module}] ${message}`, data !== undefined ? data : '');\n  }\n}\n\n/**\n * Loguru mock for browser extension use\n */\nclass LoguruMock {\n  /**\n   * Get logger for a module\n   */\n  getLogger(module: string): Logger {\n    return new Logger(module);\n  }\n}\n\n// Export singleton instance\nexport const loguru = new LoguruMock();\n","// extension/papers/manager.ts\nimport { GitHubStoreClient } from 'gh-store-client';\nimport type { Json } from 'gh-store-client';\nimport { \n  type PaperMetadata, \n  type InteractionLog, \n  type Interaction,\n  type ReadingSessionData,\n  isInteractionLog\n} from './types';\nimport { SourceManager } from '../source-integration/types';\nimport { loguru } from '../utils/logger';\n\nconst logger = loguru.getLogger('paper-manager');\n\nexport class PaperManager {\n  constructor(\n    private client: GitHubStoreClient,\n    private sourceManager: SourceManager\n  ) {\n    logger.debug('Paper manager initialized');\n  }\n  \n  /**\n   * Get paper by source and ID\n   */\n  async getPaper(sourceId: string, paperId: string): Promise<PaperMetadata | null> {\n    const objectId = this.sourceManager.formatObjectId('paper', sourceId, paperId);\n    \n    try {\n      const obj = await this.client.getObject(objectId);\n      return obj.data as PaperMetadata;\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('No object found')) {\n        return null;\n      }\n      throw error;\n    }\n  }\n  \n  /**\n   * Get or create paper metadata\n   */\n  async getOrCreatePaper(paperData: PaperMetadata): Promise<PaperMetadata> {\n    const { sourceId, paperId } = paperData;\n    const objectId = this.sourceManager.formatObjectId('paper', sourceId, paperId);\n    const paperIdentifier = this.sourceManager.formatPaperId(sourceId, paperId);\n    \n    try {\n      const obj = await this.client.getObject(objectId);\n      const data = obj.data as PaperMetadata;\n      logger.debug(`Retrieved existing paper: ${paperIdentifier}`);\n      return data;\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('No object found')) {\n        // Create new paper\n        const defaultPaperData: PaperMetadata = {\n          ...paperData,\n          timestamp: new Date().toISOString(),\n          rating: paperData.rating || 'novote'\n        };\n\n        const newobj = await this.client.createObject(objectId, defaultPaperData);\n        logger.debug(`Created new paper: ${paperIdentifier}`);\n        // reopen to trigger metadata hydration\n        await this.client.fetchFromGitHub(`/issues/${newobj.meta.issueNumber}`, {\n          method: \"PATCH\",\n          body: JSON.stringify({ state: \"open\" })\n        });\n        return defaultPaperData;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Get or create interaction log for a paper\n   */\n  private async getOrCreateInteractionLog(sourceId: string, paperId: string): Promise<InteractionLog> {\n    const objectId = this.sourceManager.formatObjectId('interactions', sourceId, paperId);\n    const paperIdentifier = this.sourceManager.formatPaperId(sourceId, paperId);\n    \n    try {\n      const obj = await this.client.getObject(objectId);\n      const data = obj.data as unknown;\n      if (isInteractionLog(data)) {\n        return data;\n      }\n      throw new Error('Invalid interaction log format');\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('No object found')) {\n        const newLog: InteractionLog = {\n          sourceId,\n          paperId,\n          interactions: []\n        };\n        await this.client.createObject(objectId, newLog as unknown as { [key: string]: Json });\n        logger.debug(`Created new interaction log: ${paperIdentifier}`);\n        return newLog;\n      }\n      throw error;\n    }\n  }\n  \n  /**\n   * Get GitHub client instance\n   */\n  getClient(): GitHubStoreClient {\n    return this.client;\n  }\n  \n  /**\n   * Log a reading session\n   */\n  async logReadingSession(\n    sourceId: string,\n    paperId: string,\n    session: ReadingSessionData,\n    paperData?: Partial<PaperMetadata>\n  ): Promise<void> {\n    // Ensure paper exists\n    if (paperData) {\n      await this.getOrCreatePaper({\n        sourceId,\n        paperId,\n        url: paperData.url || this.sourceManager.formatPaperId(sourceId, paperId),\n        title: paperData.title || paperId,\n        authors: paperData.authors || '',\n        abstract: paperData.abstract || '',\n        timestamp: new Date().toISOString(),\n        rating: 'novote',\n        publishedDate: paperData.publishedDate || '',\n        tags: paperData.tags || []\n      });\n    }\n\n    // Log the session as an interaction\n    await this.addInteraction(sourceId, paperId, {\n      type: 'reading_session',\n      timestamp: new Date().toISOString(),\n      data: session as unknown as { [key: string]: Json }\n    });\n    \n    const paperIdentifier = this.sourceManager.formatPaperId(sourceId, paperId);\n    logger.info(`Logged reading session for ${paperIdentifier}`, { duration: session.duration_seconds });\n  }\n\n  /**\n   * Log an annotation\n   */\n  async logAnnotation(\n    sourceId: string,\n    paperId: string,\n    key: string,\n    value: Json,\n    paperData?: Partial<PaperMetadata>\n  ): Promise<void> {\n    // Ensure paper exists\n    if (paperData) {\n      await this.getOrCreatePaper({\n        sourceId,\n        paperId,\n        url: paperData.url || this.sourceManager.formatPaperId(sourceId, paperId),\n        title: paperData.title || paperId,\n        authors: paperData.authors || '',\n        abstract: paperData.abstract || '',\n        timestamp: new Date().toISOString(),\n        rating: 'novote',\n        publishedDate: paperData.publishedDate || '',\n        tags: paperData.tags || []\n      });\n    }\n\n    // Log the annotation as an interaction\n    await this.addInteraction(sourceId, paperId, {\n      type: 'annotation',\n      timestamp: new Date().toISOString(),\n      data: { key, value }\n    });\n    \n    const paperIdentifier = this.sourceManager.formatPaperId(sourceId, paperId);\n    logger.info(`Logged annotation for ${paperIdentifier}`, { key });\n  }\n\n  /**\n   * Update paper rating\n   */\n  async updateRating(\n    sourceId: string,\n    paperId: string,\n    rating: string,\n    paperData?: Partial<PaperMetadata>\n  ): Promise<void> {\n    // Ensure paper exists and get current data\n    const paper = await this.getOrCreatePaper({\n      sourceId,\n      paperId,\n      url: paperData?.url || this.sourceManager.formatPaperId(sourceId, paperId),\n      title: paperData?.title || paperId,\n      authors: paperData?.authors || '',\n      abstract: paperData?.abstract || '',\n      timestamp: new Date().toISOString(),\n      rating: 'novote',\n      publishedDate: paperData?.publishedDate || '',\n      tags: paperData?.tags || []\n    });\n\n    const objectId = this.sourceManager.formatObjectId('paper', sourceId, paperId);\n    \n    // Update paper metadata with new rating\n    await this.client.updateObject(objectId, { \n      ...paper,\n      rating \n    });\n\n    // Log rating change as an interaction\n    await this.addInteraction(sourceId, paperId, {\n      type: 'rating',\n      timestamp: new Date().toISOString(),\n      data: { rating }\n    });\n    \n    const paperIdentifier = this.sourceManager.formatPaperId(sourceId, paperId);\n    logger.info(`Updated rating for ${paperIdentifier} to ${rating}`);\n  }\n\n  /**\n   * Add interaction to log\n   */\n  private async addInteraction(sourceId: string, paperId: string, interaction: Interaction): Promise<void> {\n    const log = await this.getOrCreateInteractionLog(sourceId, paperId);\n    log.interactions.push(interaction);\n    \n    const objectId = this.sourceManager.formatObjectId('interactions', sourceId, paperId);\n    await this.client.updateObject(objectId, log as unknown as { [key: string]: Json });\n  }\n}\n","// session-service.ts\n// Simplified session tracking service for background script\n\nimport { loguru } from './logger';\nimport { PaperManager } from '../papers/manager';\nimport { ReadingSessionData, PaperMetadata } from '../papers/types';\n\nconst logger = loguru.getLogger('session-service');\n\n/**\n * Session tracking service for paper reading sessions\n * \n * Manages session state, heartbeats, and persistence\n * Designed for use in the background script (Service Worker)\n */\nexport class SessionService {\n  private activeSession: {\n    sourceId: string;\n    paperId: string;\n    startTime: Date;\n    heartbeatCount: number;\n    lastHeartbeatTime: Date;\n  } | null = null;\n  \n  private timeoutId: number | null = null;\n  private paperMetadata: Map<string, PaperMetadata> = new Map();\n  \n  // Configuration\n  private readonly HEARTBEAT_TIMEOUT = 15000; // 15 seconds\n  \n  /**\n   * Create a new session service\n   */\n  constructor(private paperManager: PaperManager | null) {\n    logger.debug('Session service initialized');\n  }\n  \n  /**\n   * Start a new session for a paper\n   */\n  startSession(sourceId: string, paperId: string, metadata?: PaperMetadata): void {\n    // End any existing session\n    this.endSession();\n    \n    // Create new session\n    this.activeSession = {\n      sourceId,\n      paperId,\n      startTime: new Date(),\n      heartbeatCount: 0,\n      lastHeartbeatTime: new Date()\n    };\n    \n    // Store metadata if provided\n    if (metadata) {\n      const key = `${sourceId}:${paperId}`;\n      this.paperMetadata.set(key, metadata);\n      logger.debug(`Stored metadata for ${key}`);\n    }\n    \n    // Start timeout check\n    this.scheduleTimeoutCheck();\n    \n    logger.info(`Started session for ${sourceId}:${paperId}`);\n  }\n  \n  /**\n   * Record a heartbeat for the current session\n   */\n  recordHeartbeat(): boolean {\n    if (!this.activeSession) {\n      return false;\n    }\n    \n    this.activeSession.heartbeatCount++;\n    this.activeSession.lastHeartbeatTime = new Date();\n    \n    // Reschedule timeout\n    this.scheduleTimeoutCheck();\n    \n    if (this.activeSession.heartbeatCount % 12 === 0) { // Log every minute (12 x 5sec heartbeats)\n      logger.debug(`Session received ${this.activeSession.heartbeatCount} heartbeats`);\n    }\n    \n    return true;\n  }\n  \n  /**\n   * Schedule a check for heartbeat timeout\n   */\n  private scheduleTimeoutCheck(): void {\n    // Clear existing timeout\n    if (this.timeoutId !== null) {\n      clearTimeout(this.timeoutId);\n    }\n    \n    // Set new timeout\n    this.timeoutId = self.setTimeout(() => {\n      this.checkTimeout();\n    }, this.HEARTBEAT_TIMEOUT);\n  }\n  \n  /**\n   * Check if the session has timed out due to missing heartbeats\n   */\n  private checkTimeout(): void {\n    if (!this.activeSession) return;\n    \n    const now = Date.now();\n    const lastTime = this.activeSession.lastHeartbeatTime.getTime();\n    \n    if ((now - lastTime) > this.HEARTBEAT_TIMEOUT) {\n      logger.info('Session timeout detected');\n      this.endSession();\n    } else {\n      this.scheduleTimeoutCheck();\n    }\n  }\n  \n  /**\n   * End the current session and get the data\n   */\n  endSession(): ReadingSessionData | null {\n    if (!this.activeSession) return null;\n    \n    // Clear timeout\n    if (this.timeoutId !== null) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n    \n    const { sourceId, paperId, startTime, heartbeatCount } = this.activeSession;\n    const endTime = new Date();\n    \n    // Calculate duration (5 seconds per heartbeat)\n    const duration = heartbeatCount * 5;\n    \n    // Calculate total elapsed time\n    const totalElapsed = endTime.getTime() - startTime.getTime();\n    const totalElapsedSeconds = Math.round(totalElapsed / 1000);\n    \n    // Set idle seconds to the difference (for backward compatibility)\n    const idleSeconds = Math.max(0, totalElapsedSeconds - duration);\n    \n    // Create session data\n    const sessionData: ReadingSessionData = {\n      session_id: `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n      source_id: sourceId,\n      paper_id: paperId,\n      start_time: startTime.toISOString(),\n      end_time: endTime.toISOString(),\n      heartbeat_count: heartbeatCount,\n      duration_seconds: duration,\n      // Legacy fields\n      idle_seconds: idleSeconds,\n      total_elapsed_seconds: totalElapsedSeconds\n    };\n    \n    // Store session if it was meaningful and we have a paper manager\n    if (this.paperManager && heartbeatCount > 0) {\n      const metadata = this.getPaperMetadata(sourceId, paperId);\n      \n      this.paperManager.logReadingSession(sourceId, paperId, sessionData, metadata)\n        .catch(err => logger.error('Failed to store session', err));\n    }\n    \n    logger.info(`Ended session for ${sourceId}:${paperId}`, {\n      duration,\n      heartbeats: heartbeatCount\n    });\n    \n    // Clear active session\n    this.activeSession = null;\n    \n    return sessionData;\n  }\n  \n  /**\n   * Check if a session is currently active\n   */\n  hasActiveSession(): boolean {\n    return this.activeSession !== null;\n  }\n  \n  /**\n   * Get information about the current session\n   */\n  getCurrentSession(): { sourceId: string, paperId: string } | null {\n    if (!this.activeSession) return null;\n    \n    return {\n      sourceId: this.activeSession.sourceId,\n      paperId: this.activeSession.paperId\n    };\n  }\n  \n  /**\n   * Get paper metadata for the current or specified session\n   */\n  getPaperMetadata(sourceId?: string, paperId?: string): PaperMetadata | undefined {\n    if (!sourceId || !paperId) {\n      if (!this.activeSession) return undefined;\n      sourceId = this.activeSession.sourceId;\n      paperId = this.activeSession.paperId;\n    }\n    \n    return this.paperMetadata.get(`${sourceId}:${paperId}`);\n  }\n  \n  /**\n   * Store paper metadata\n   */\n  storePaperMetadata(metadata: PaperMetadata): void {\n    const key = `${metadata.sourceId}:${metadata.paperId}`;\n    this.paperMetadata.set(key, metadata);\n  }\n  \n  /**\n   * Get time since last heartbeat in milliseconds\n   */\n  getTimeSinceLastHeartbeat(): number | null {\n    if (!this.activeSession) {\n      return null;\n    }\n    \n    return Date.now() - this.activeSession.lastHeartbeatTime.getTime();\n  }\n  \n  /**\n   * Get session statistics for debugging\n   */\n  getSessionStats(): any {\n    if (!this.activeSession) {\n      return { active: false };\n    }\n    \n    return {\n      active: true,\n      sourceId: this.activeSession.sourceId,\n      paperId: this.activeSession.paperId,\n      startTime: this.activeSession.startTime.toISOString(),\n      heartbeatCount: this.activeSession.heartbeatCount,\n      lastHeartbeatTime: this.activeSession.lastHeartbeatTime.toISOString(),\n      elapsedTime: Math.round((Date.now() - this.activeSession.startTime.getTime()) / 1000)\n    };\n  }\n}\n","// extension/utils/popup-manager.ts\n// Popup management system integrated with source manager\n\nimport { SourceManager } from '../source-integration/types';\nimport { PaperManager } from '../papers/manager';\nimport { PaperMetadata } from '../papers/types';\nimport { loguru } from './logger';\n\nconst logger = loguru.getLogger('popup-manager');\n\n/**\n * Popup handler information\n */\ninterface PopupHandler {\n  selector: string;\n  event: string;\n  action: string;\n}\n\n/**\n * Popup message type\n */\ninterface ShowPopupMessage {\n  type: 'showPopup';\n  sourceId: string;\n  paperId: string;\n  html: string;\n  handlers: PopupHandler[];\n  position?: { x: number, y: number };\n}\n\n/**\n * Manages all popup-related functionality\n */\nexport class PopupManager {\n  // Source manager and paper manager\n  private sourceManagerProvider: () => SourceManager | null;\n  private paperManagerProvider: () => PaperManager | null;\n  \n  /**\n   * Create a new popup manager\n   */\n  constructor(\n    sourceManagerProvider: () => SourceManager | null,\n    paperManagerProvider: () => PaperManager | null\n  ) {\n    this.sourceManagerProvider = sourceManagerProvider;\n    this.paperManagerProvider = paperManagerProvider;\n    \n    this.setupMessageListeners();\n    logger.debug('Popup manager initialized');\n  }\n  \n  /**\n   * Set up message listeners for popup-related messages\n   */\n  private setupMessageListeners(): void {\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n      // Handle popup actions (ratings, notes, etc.)\n      if (message.type === 'popupAction') {\n        this.handlePopupAction(\n          message.sourceId,\n          message.paperId,\n          message.action,\n          message.data\n        ).then(() => {\n          sendResponse({ success: true });\n        }).catch(error => {\n          logger.error('Error handling popup action', error);\n          sendResponse({ \n            success: false, \n            error: error instanceof Error ? error.message : 'Unknown error' \n          });\n        });\n        \n        return true; // Will respond asynchronously\n      }\n      \n      // Handle request to show annotation popup\n      if (message.type === 'showAnnotationPopup' && sender.tab?.id) {\n        this.handleShowAnnotationPopup(\n          sender.tab.id,\n          message.sourceId,\n          message.paperId,\n          message.position\n        ).then(() => {\n          sendResponse({ success: true });\n        }).catch(error => {\n          logger.error('Error showing popup', error);\n          sendResponse({ \n            success: false, \n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        });\n        \n        return true; // Will respond asynchronously\n      }\n      \n      return false; // Not handled\n    });\n  }\n  \n  /**\n   * Handle a request to show an annotation popup\n   */\n  private async handleShowAnnotationPopup(\n    tabId: number,\n    sourceId: string,\n    paperId: string,\n    position: { x: number, y: number }\n  ): Promise<void> {\n    logger.debug(`Showing annotation popup for ${sourceId}:${paperId}`);\n    \n    // Check if we have source and paper manager\n    const sourceManager = this.sourceManagerProvider();\n    const paperManager = this.paperManagerProvider();\n    \n    if (!sourceManager) {\n      throw new Error('Source manager not initialized');\n    }\n    \n    if (!paperManager) {\n      throw new Error('Paper manager not initialized');\n    }\n    \n    try {\n      // Get paper data\n      const paper = await paperManager.getPaper(sourceId, paperId);\n      \n      // Create popup HTML\n      const html = this.createPopupHtml(paper || { \n        sourceId, \n        paperId,\n        title: paperId,\n        authors: '',\n        abstract: '',\n        url: '',\n        timestamp: new Date().toISOString(),\n        publishedDate: '',\n        tags: [],\n        rating: 'novote'\n      });\n      \n      // Get handlers\n      const handlers = this.getStandardPopupHandlers();\n      \n      // Send message to content script to show popup\n      const message: ShowPopupMessage = {\n        type: 'showPopup',\n        sourceId,\n        paperId,\n        html,\n        handlers,\n        position\n      };\n      \n      await chrome.tabs.sendMessage(tabId, message);\n      \n      logger.debug(`Sent popup to content script for ${sourceId}:${paperId}`);\n    } catch (error) {\n      logger.error(`Error showing popup for ${sourceId}:${paperId}`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Handle popup actions (ratings, notes, etc.)\n   */\n  private async handlePopupAction(\n    sourceId: string,\n    paperId: string,\n    action: string,\n    data: any\n  ): Promise<void> {\n    const paperManager = this.paperManagerProvider();\n    \n    if (!paperManager) {\n      throw new Error('Paper manager not initialized');\n    }\n    \n    logger.debug(`Handling popup action: ${action}`, { sourceId, paperId });\n    \n    try {\n      if (action === 'rate') {\n        await paperManager.updateRating(sourceId, paperId, data.value);\n        logger.info(`Updated rating for ${sourceId}:${paperId} to ${data.value}`);\n      } \n      else if (action === 'saveNotes') {\n        if (data.value) {\n          await paperManager.logAnnotation(sourceId, paperId, 'notes', data.value);\n          logger.info(`Saved notes for ${sourceId}:${paperId}`);\n        }\n      }\n    } catch (error) {\n      logger.error(`Error handling action ${action} for ${sourceId}:${paperId}`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Create HTML for paper popup\n   */\n  private createPopupHtml(paper: PaperMetadata): string {\n    return `\n      <div class=\"paper-popup-header\">${paper.title || paper.paperId}</div>\n      <div class=\"paper-popup-meta\">${paper.authors || ''}</div>\n      \n      <div class=\"paper-popup-buttons\">\n        <button class=\"vote-button\" data-vote=\"thumbsup\" id=\"btn-thumbsup\" ${paper.rating === 'thumbsup' ? 'class=\"active\"' : ''}>👍 Interesting</button>\n        <button class=\"vote-button\" data-vote=\"thumbsdown\" id=\"btn-thumbsdown\" ${paper.rating === 'thumbsdown' ? 'class=\"active\"' : ''}>👎 Not Relevant</button>\n      </div>\n      \n      <textarea placeholder=\"Add notes about this paper...\" id=\"paper-notes\"></textarea>\n      \n      <div class=\"paper-popup-actions\">\n        <button class=\"save-button\" id=\"btn-save\">Save</button>\n      </div>\n    `;\n  }\n  \n  /**\n   * Get standard popup event handlers\n   */\n  private getStandardPopupHandlers(): PopupHandler[] {\n    return [\n      { selector: '#btn-thumbsup', event: 'click', action: 'rate' },\n      { selector: '#btn-thumbsdown', event: 'click', action: 'rate' },\n      { selector: '#btn-save', event: 'click', action: 'saveNotes' }\n    ];\n  }\n}\n","// extension/source-integration/source-manager.ts\n// Updated SourceIntegrationManager to use source-specific identifier formatting\n\nimport { SourceIntegration, SourceManager } from './types';\nimport { loguru } from '../utils/logger';\n\nconst logger = loguru.getLogger('source-manager');\n\n/**\n * Manages source integrations\n */\nexport class SourceIntegrationManager implements SourceManager {\n  private sources: Map<string, SourceIntegration> = new Map();\n  \n  constructor() {\n    logger.info('Source integration manager initialized');\n  }\n  \n  /**\n   * Register a source integration\n   */\n  registerSource(source: SourceIntegration): void {\n    if (this.sources.has(source.id)) {\n      logger.warning(`Source with ID '${source.id}' already registered, overwriting`);\n    }\n    \n    this.sources.set(source.id, source);\n    logger.info(`Registered source: ${source.name} (${source.id})`);\n  }\n  \n  /**\n   * Get all registered sources\n   */\n  getAllSources(): SourceIntegration[] {\n    return Array.from(this.sources.values());\n  }\n  \n  /**\n   * Get source that can handle a URL\n   */\n  getSourceForUrl(url: string): SourceIntegration | null {\n    for (const source of this.sources.values()) {\n      if (source.canHandleUrl(url)) {\n        logger.debug(`Found source for URL '${url}': ${source.id}`);\n        return source;\n      }\n    }\n    \n    logger.debug(`No source found for URL: ${url}`);\n    return null;\n  }\n  \n  /**\n   * Get source by ID\n   */\n  getSourceById(sourceId: string): SourceIntegration | null {\n    const source = this.sources.get(sourceId);\n    return source || null;\n  }\n  \n  /**\n   * Extract paper ID from URL using appropriate source\n   */\n  extractPaperId(url: string): { sourceId: string, paperId: string } | null {\n    for (const source of this.sources.values()) {\n      if (source.canHandleUrl(url)) {\n        const paperId = source.extractPaperId(url);\n        if (paperId) {\n          logger.debug(`Extracted paper ID '${paperId}' from URL using ${source.id}`);\n          return { sourceId: source.id, paperId };\n        }\n      }\n    }\n    \n    logger.debug(`Could not extract paper ID from URL: ${url}`);\n    return null;\n  }\n  \n  /**\n   * Format a paper identifier using the appropriate source\n   */\n  formatPaperId(sourceId: string, paperId: string): string {\n    const source = this.sources.get(sourceId);\n    \n    if (source) {\n      return source.formatPaperId(paperId);\n    }\n    \n    // Fallback if source not found\n    logger.warning(`Source '${sourceId}' not found, using default format for paper ID`);\n    return `${sourceId}.${paperId}`;\n  }\n  \n  /**\n   * Format an object ID using the appropriate source\n   */\n  formatObjectId(type: string, sourceId: string, paperId: string): string {\n    const source = this.sources.get(sourceId);\n    \n    if (source) {\n      return source.formatObjectId(type, paperId);\n    }\n    \n    // Fallback if source not found\n    logger.warning(`Source '${sourceId}' not found, using default format for object ID`);\n    return `${type}:${sourceId}.${paperId}`;\n  }\n  \n  /**\n   * Get all content script match patterns\n   */\n  getAllContentScriptMatches(): string[] {\n    const patterns: string[] = [];\n    \n    for (const source of this.sources.values()) {\n      patterns.push(...source.contentScriptMatches);\n    }\n    \n    return patterns;\n  }\n}\n","// extension/source-integration/metadata-extractor.ts\n// Object-oriented metadata extraction system with customizable extraction methods\n\nimport { loguru } from '../utils/logger';\n\nconst logger = loguru.getLogger('metadata-extractor');\n\nexport interface ExtractedMetadata {\n  title: string;\n  authors: string;\n  description: string;\n  publishedDate: string;\n  doi?: string;\n  journalName?: string;\n  tags?: string[];\n  url?: string;\n}\n\n// Constants for standard source types\nexport const SOURCE_TYPES = {\n  PDF: 'pdf',\n  URL: 'url',\n} as const;\n\nexport type SourceType = typeof SOURCE_TYPES[keyof typeof SOURCE_TYPES];\n\n/**\n * Base class for metadata extraction with customizable extraction methods\n * Each method can be overridden to provide source-specific extraction\n */\nexport class MetadataExtractor {\n  protected document: Document;\n  protected url: string;\n  \n  /**\n   * Create a new metadata extractor for a document\n   */\n  constructor(document: Document) {\n    this.document = document;\n    this.url = document.location.href;\n    logger.debug('Initialized metadata extractor for:', this.url);\n  }\n  \n  /**\n   * Helper method to get content from meta tags\n   */\n  protected getMetaContent(selector: string): string {\n    const element = this.document.querySelector(selector);\n    return element ? element.getAttribute('content') || '' : '';\n  }\n  \n  /**\n   * Extract and return all metadata fields\n   */\n  public extract(): ExtractedMetadata {\n    logger.debug('Extracting metadata from page:', this.url);\n    \n    const metadata: ExtractedMetadata = {\n      title: this.extractTitle(),\n      authors: this.extractAuthors(),\n      description: this.extractDescription(),\n      publishedDate: this.extractPublishedDate(),\n      doi: this.extractDoi(),\n      journalName: this.extractJournalName(),\n      tags: this.extractTags(),\n      url: this.url\n    };\n    \n    logger.debug('Metadata extraction complete:', metadata);\n    return metadata;\n  }\n  \n  /**\n   * Extract title from document\n   * Considers multiple metadata standards with priority order\n   */\n  protected extractTitle(): string {\n    // Title extraction - priority order\n    return (\n      // Dublin Core\n      this.getMetaContent('meta[name=\"DC.Title\"]') ||\n      // Citation\n      this.getMetaContent('meta[name=\"citation_title\"]') ||\n      // Open Graph\n      this.getMetaContent('meta[property=\"og:title\"]') ||\n      // Standard meta\n      this.getMetaContent('meta[name=\"title\"]') ||\n      // Fallback to document title\n      this.document.title\n    );\n  }\n  \n  /**\n   * Extract authors from document\n   * Handles multiple author formats and sources\n   */\n  protected extractAuthors(): string {\n    // Get all citation authors (some pages have multiple citation_author tags)\n    const citationAuthors: string[] = [];\n    this.document.querySelectorAll('meta[name=\"citation_author\"]').forEach(el => {\n      const content = el.getAttribute('content');\n      if (content) citationAuthors.push(content);\n    });\n    \n    // Get all DC creators\n    const dcCreators: string[] = [];\n    this.document.querySelectorAll('meta[name=\"DC.Creator.PersonalName\"]').forEach(el => {\n      const content = el.getAttribute('content');\n      if (content) dcCreators.push(content);\n    });\n    \n    // Individual author elements\n    const dcCreator = this.getMetaContent('meta[name=\"DC.Creator.PersonalName\"]');\n    const citationAuthor = this.getMetaContent('meta[name=\"citation_author\"]');\n    const ogAuthor = this.getMetaContent('meta[property=\"og:article:author\"]') ||\n                    this.getMetaContent('meta[name=\"author\"]');\n    \n    // Set authors with priority\n    if (dcCreators.length > 0) {\n      return dcCreators.join(', ');\n    } else if (citationAuthors.length > 0) {\n      return citationAuthors.join(', ');\n    } else if (dcCreator) {\n      return dcCreator;\n    } else if (citationAuthor) {\n      return citationAuthor;\n    } else if (ogAuthor) {\n      return ogAuthor;\n    }\n    \n    return '';\n  }\n  \n  /**\n   * Extract description/abstract from document\n   */\n  protected extractDescription(): string {\n    return (\n      this.getMetaContent('meta[name=\"DC.Description\"]') ||\n      this.getMetaContent('meta[name=\"citation_abstract\"]') ||\n      this.getMetaContent('meta[property=\"og:description\"]') ||\n      this.getMetaContent('meta[name=\"description\"]')\n    );\n  }\n  \n  /**\n   * Extract publication date from document\n   */\n  protected extractPublishedDate(): string {\n    return (\n      this.getMetaContent('meta[name=\"DC.Date.issued\"]') ||\n      this.getMetaContent('meta[name=\"citation_date\"]') ||\n      this.getMetaContent('meta[property=\"article:published_time\"]')\n    );\n  }\n  \n  /**\n   * Extract DOI (Digital Object Identifier) from document\n   */\n  protected extractDoi(): string {\n    return (\n      this.getMetaContent('meta[name=\"DC.Identifier.DOI\"]') ||\n      this.getMetaContent('meta[name=\"citation_doi\"]')\n    );\n  }\n  \n  /**\n   * Extract journal name from document\n   */\n  protected extractJournalName(): string {\n    return (\n      this.getMetaContent('meta[name=\"DC.Source\"]') ||\n      this.getMetaContent('meta[name=\"citation_journal_title\"]')\n    );\n  }\n  \n  /**\n   * Extract keywords/tags from document\n   */\n  protected extractTags(): string[] {\n    const keywords = this.getMetaContent('meta[name=\"keywords\"]') ||\n                    this.getMetaContent('meta[name=\"DC.Subject\"]');\n    \n    if (keywords) {\n      return keywords.split(',').map(tag => tag.trim());\n    }\n    \n    return [];\n  }\n  \n  /**\n   * Determine if the current URL is a PDF\n   */\n  public isPdf(): boolean {\n    return isPdfUrl(this.url);\n  }\n  \n  /**\n   * Get the source type (PDF or URL)\n   */\n  public getSourceType(): SourceType {\n    return this.isPdf() ? SOURCE_TYPES.PDF : SOURCE_TYPES.URL;\n  }\n  \n  /**\n   * Generate a paper ID for the current URL\n   */\n  public generatePaperId(): string {\n    return generatePaperIdFromUrl(this.url);\n  }\n}\n\n/**\n * Create a common metadata extractor for a document\n * Factory function for creating the default extractor\n */\nexport function createMetadataExtractor(document: Document): MetadataExtractor {\n  return new MetadataExtractor(document);\n}\n\n/**\n * Extract common metadata from a document\n * Convenience function for quick extraction\n */\nexport function extractCommonMetadata(document: Document): ExtractedMetadata {\n  return createMetadataExtractor(document).extract();\n}\n\n/**\n * Generate a paper ID from a URL\n * Creates a consistent hash-based identifier\n */\nexport function generatePaperIdFromUrl(url: string): string {\n  // Use a basic hash function to create an ID from the URL\n  let hash = 0;\n  for (let i = 0; i < url.length; i++) {\n    const char = url.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  \n  // Create a positive hexadecimal string\n  const positiveHash = Math.abs(hash).toString(16).toUpperCase();\n  \n  // Use the first 8 characters as the ID\n  return positiveHash.substring(0, 8);\n}\n\n/**\n * Determine if a URL is a PDF\n */\nexport function isPdfUrl(url: string): boolean {\n  return url.toLowerCase().endsWith('.pdf');\n}\n","// extension/source-integration/base-source.ts\n// Base class for source integrations with default identifier formatting\n// and metadata extraction capability\n\nimport { SourceIntegration } from './types';\nimport { PaperMetadata } from '../papers/types';\nimport { loguru } from '../utils/logger';\nimport { \n  MetadataExtractor, \n  createMetadataExtractor,\n  generatePaperIdFromUrl\n} from './metadata-extractor';\n\nconst logger = loguru.getLogger('base-source');\n\n/**\n * Base class for source integrations\n * Provides default implementations for all methods\n * Specific sources can override as needed\n */\nexport class BaseSourceIntegration implements SourceIntegration {\n  // Default properties - set for generic web pages\n  readonly id: string = 'url';\n  readonly name: string = 'Web Page';\n  readonly urlPatterns: RegExp[] = [\n    /^https?:\\/\\/(?!.*\\.pdf($|\\?|#)).*$/i  // Match HTTP/HTTPS URLs that aren't PDFs\n  ];\n  readonly contentScriptMatches: string[] = [];\n\n  /**\n   * Check if this integration can handle the given URL\n   * Default implementation checks against urlPatterns\n   */\n  canHandleUrl(url: string): boolean {\n    return this.urlPatterns.some(pattern => pattern.test(url));\n  }\n\n  /**\n   * Extract paper ID from URL\n   * Default implementation creates a hash from the URL\n   */\n  extractPaperId(url: string): string | null {\n    return generatePaperIdFromUrl(url);\n  }\n  \n  /**\n   * Create a metadata extractor for the given document\n   * Override this method to provide a custom extractor for your source\n   */\n  protected createMetadataExtractor(document: Document): MetadataExtractor {\n    return createMetadataExtractor(document);\n  }\n  \n  /**\n   * Extract metadata from a page\n   * Default implementation uses common metadata extraction\n   */\n  async extractMetadata(document: Document, paperId: string): Promise<PaperMetadata | null> {\n    try {\n      logger.debug(`Extracting metadata using base extractor for ID: ${paperId}`);\n      \n      // Create a metadata extractor for this document\n      const extractor = this.createMetadataExtractor(document);\n      \n      // Extract metadata\n      const extracted = extractor.extract();\n      const url = document.location.href;\n      \n      // Determine source type (PDF or URL)\n      const sourceType = extractor.getSourceType();\n      \n      // Create PaperMetadata object\n      return {\n        sourceId: this.id,\n        //paperId: this.formatPaperId(paperId),\n        paperId: paperId,\n        url: url,\n        title: extracted.title || document.title || paperId,\n        authors: extracted.authors || '',\n        abstract: extracted.description || '',\n        timestamp: new Date().toISOString(),\n        rating: 'novote',\n        publishedDate: extracted.publishedDate || '',\n        tags: extracted.tags || [],\n        doi: extracted.doi,\n        journalName: extracted.journalName,\n        sourceType: sourceType // Store the source type for reference\n      };\n    } catch (error) {\n      logger.error('Error extracting metadata with base extractor', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Format a paper identifier for this source\n   * Default implementation uses the format: sourceId.paperId\n   */\n  formatPaperId(paperId: string): string {\n    return `${this.id}.${paperId}`;\n  }\n  \n  /**\n   * Parse a paper identifier specific to this source\n   * Default implementation handles source.paperId format and extracts paperId\n   */\n  parsePaperId(identifier: string): string | null {\n    const prefix = `${this.id}.`;\n    \n    if (identifier.startsWith(prefix)) {\n      return identifier.substring(prefix.length);\n    }\n    \n    // Try legacy format (sourceId:paperId)\n    const legacyPrefix = `${this.id}:`;\n    if (identifier.startsWith(legacyPrefix)) {\n      logger.debug(`Parsed legacy format identifier: ${identifier}`);\n      return identifier.substring(legacyPrefix.length);\n    }\n    \n    return null;\n  }\n  \n  /**\n   * Format a storage object ID for this source\n   * Default implementation uses the format: type:sourceId.paperId\n   */\n  formatObjectId(type: string, paperId: string): string {\n    return `${type}:${this.formatPaperId(paperId)}`;\n  }\n}\n","// extension/source-integration/arxiv/index.ts\n// ArXiv integration with custom metadata extractor\n\nimport { BaseSourceIntegration } from '../base-source';\nimport { PaperMetadata } from '../../papers/types';\nimport { MetadataExtractor, ExtractedMetadata } from '../metadata-extractor';\nimport { loguru } from '../../utils/logger';\n\nconst logger = loguru.getLogger('arxiv-integration');\n\n/**\n * Custom metadata extractor for arXiv pages\n */\nclass ArxivMetadataExtractor extends MetadataExtractor {\n  private apiMetadata?: Partial<ExtractedMetadata>;\n  \n  constructor(document: Document, apiMetadata?: Partial<ExtractedMetadata>) {\n    super(document);\n    this.apiMetadata = apiMetadata;\n  }\n  \n  /**\n   * Override title extraction to use API data if available\n   */\n  protected extractTitle(): string {\n    if (this.apiMetadata?.title) {\n      return this.apiMetadata.title;\n    }\n    \n    // arXiv-specific selectors\n    //const arxivTitle = this.document.querySelector('.title.mathjax')?.textContent?.trim();\n    \n    //return arxivTitle || super.extractTitle();\n    return super.extractTitle();\n  }\n  \n  /**\n   * Override authors extraction to use API data if available\n   */\n  protected extractAuthors(): string {\n    if (this.apiMetadata?.authors) {\n      return this.apiMetadata.authors;\n    }\n    \n    // arXiv-specific selectors\n    const authorLinks = this.document.querySelectorAll('.authors a');\n    if (authorLinks.length > 0) {\n      return Array.from(authorLinks)\n        .map(link => link.textContent?.trim())\n        .filter(Boolean)\n        .join(', ');\n    }\n    \n    return super.extractAuthors();\n  }\n  \n  /**\n   * Override description extraction to use API data if available\n   */\n  protected extractDescription(): string {\n    if (this.apiMetadata?.description) {\n      return this.apiMetadata.description;\n    }\n    \n    // arXiv-specific selectors\n    const abstract = this.document.querySelector('.abstract')?.textContent?.trim();\n    if (abstract) {\n      // Remove \"Abstract:\" prefix if present\n      return abstract.replace(/^Abstract:\\s*/i, '');\n    }\n    \n    return super.extractDescription();\n  }\n  \n  /**\n   * Override published date extraction to use API data if available\n   */\n  protected extractPublishedDate(): string {\n    if (this.apiMetadata?.publishedDate) {\n      return this.apiMetadata.publishedDate;\n    }\n    \n    // arXiv-specific date extraction\n    const datelineElement = this.document.querySelector('.dateline');\n    if (datelineElement) {\n      const dateText = datelineElement.textContent;\n      const dateMatch = dateText?.match(/\\(Submitted on ([^)]+)\\)/);\n      if (dateMatch) {\n        return dateMatch[1];\n      }\n    }\n    \n    return super.extractPublishedDate();\n  }\n  \n  /**\n   * Override DOI extraction to use API data if available\n   */\n  protected extractDoi(): string {\n    return this.apiMetadata?.doi || super.extractDoi();\n  }\n  \n  /**\n   * Override journal extraction to use API data if available\n   */\n  protected extractJournalName(): string {\n    return this.apiMetadata?.journalName || super.extractJournalName();\n  }\n  \n  /**\n   * Override tags extraction to use API data if available\n   */\n  protected extractTags(): string[] {\n    if (this.apiMetadata?.tags) {\n      return this.apiMetadata.tags;\n    }\n    \n    // arXiv-specific category extraction\n    const subjects = this.document.querySelector('.subjects')?.textContent?.trim();\n    if (subjects) {\n      return subjects.split(/[;,]/).map(tag => tag.trim()).filter(Boolean);\n    }\n    \n    return super.extractTags();\n  }\n}\n\n/**\n * ArXiv integration with custom metadata extraction\n */\nexport class ArXivIntegration extends BaseSourceIntegration {\n  readonly id = 'arxiv';\n  readonly name = 'arXiv.org';\n  \n  // URL patterns for papers\n  readonly urlPatterns = [\n    /arxiv\\.org\\/(abs|pdf|html)\\/([0-9.]+)/,\n    /arxiv\\.org\\/\\w+\\/([0-9.]+)/\n  ];\n  \n  // Content script matches\n  readonly contentScriptMatches = [\n    \"*://*.arxiv.org/*\"\n  ];\n\n  // ArXiv API endpoint\n  private readonly API_BASE_URL = 'https://export.arxiv.org/api/query';\n\n  /**\n   * Extract paper ID from URL\n   */\n  extractPaperId(url: string): string | null {\n    for (const pattern of this.urlPatterns) {\n      const match = url.match(pattern);\n      if (match) {\n        return match[2] || match[1]; // The capture group with the paper ID\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Create a custom metadata extractor for arXiv\n   */\n  protected createMetadataExtractor(document: Document): MetadataExtractor {\n    return new ArxivMetadataExtractor(document);\n  }\n\n  /**\n   * Fetch metadata from ArXiv API\n   */\n  private async fetchFromApi(paperId: string): Promise<Partial<ExtractedMetadata> | null> {\n    try {\n      const apiUrl = `${this.API_BASE_URL}?id_list=${paperId}`;\n      logger.debug(`Fetching from ArXiv API: ${apiUrl}`);\n      \n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        logger.error(`ArXiv API request failed with status: ${response.status}`);\n        return null;\n      }\n      \n      const xmlText = await response.text();\n      \n      // Parse XML to JSON\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      // Convert XML to a more manageable format\n      const entry = xmlDoc.querySelector('entry');\n      if (!entry) {\n        logger.warn('No entry found in ArXiv API response');\n        return null;\n      }\n      \n      // Extract metadata from XML\n      const title = entry.querySelector('title')?.textContent?.trim() || '';\n      const summary = entry.querySelector('summary')?.textContent?.trim() || '';\n      const published = entry.querySelector('published')?.textContent?.trim() || '';\n      \n      // Extract authors\n      const authorElements = entry.querySelectorAll('author name');\n      const authors = Array.from(authorElements)\n        .map(el => el.textContent?.trim())\n        .filter(Boolean)\n        .join(', ');\n      \n      // Extract DOI if available\n      const doi = entry.querySelector('arxiv\\\\:doi, doi')?.textContent?.trim();\n      \n      // Extract journal reference if available\n      const journalRef = entry.querySelector('arxiv\\\\:journal_ref, journal_ref')?.textContent?.trim();\n      \n      // Extract categories\n      const categoryElements = entry.querySelectorAll('category');\n      const categories = Array.from(categoryElements)\n        .map(el => el.getAttribute('term'))\n        .filter(Boolean) as string[];\n      \n      return {\n        title,\n        authors,\n        description: summary,\n        publishedDate: published,\n        doi,\n        journalName: journalRef,\n        tags: categories\n      };\n      \n    } catch (error) {\n      logger.error('Error fetching from ArXiv API', error);\n      return null;\n    }\n  }\n\n  /**\n   * Extract metadata from page or fetch from API\n   * Override parent method to handle the API fallback\n   */\n  async extractMetadata(document: Document, paperId: string): Promise<PaperMetadata | null> {\n    try {\n      logger.info(`Extracting metadata for arXiv ID: ${paperId}`);\n      \n      // Try to extract from page first\n      const extractor = this.createMetadataExtractor(document);\n      const pageMetadata = extractor.extract();\n      \n      // Check if we have the essential fields\n      const hasTitle = pageMetadata.title && pageMetadata.title !== document.title;\n      const hasAuthors = pageMetadata.authors && pageMetadata.authors.length > 0;\n      const hasAbstract = pageMetadata.description && pageMetadata.description.length > 0;\n      \n      if (hasTitle && hasAuthors && hasAbstract) {\n        logger.debug('Successfully extracted complete metadata from page');\n        return this.convertToPageMetadata(pageMetadata, paperId, extractor.getSourceType());\n      }\n      \n      // If page extraction is incomplete, fetch from API\n      logger.info('Page metadata incomplete, fetching from ArXiv API');\n      const apiMetadata = await this.fetchFromApi(paperId);\n      \n      if (!apiMetadata) {\n        logger.warn('Failed to fetch metadata from ArXiv API, using partial page data');\n        return this.convertToPageMetadata(pageMetadata, paperId, extractor.getSourceType());\n      }\n      \n      // Create a new extractor with API data\n      const enhancedExtractor = new ArxivMetadataExtractor(document, apiMetadata);\n      const mergedMetadata = enhancedExtractor.extract();\n      \n      logger.debug('Merged metadata from page and API', mergedMetadata);\n      return this.convertToPageMetadata(mergedMetadata, paperId, enhancedExtractor.getSourceType());\n      \n    } catch (error) {\n      logger.error('Error extracting metadata for arXiv', error);\n      return null;\n    }\n  }\n\n  /**\n   * Convert ExtractedMetadata to PaperMetadata\n   */\n  private convertToPageMetadata(extracted: ExtractedMetadata, paperId: string, sourceType: string): PaperMetadata {\n    return {\n      sourceId: this.id,\n      paperId: paperId,\n      url: extracted.url || '',\n      title: extracted.title,\n      authors: extracted.authors,\n      abstract: extracted.description,\n      timestamp: new Date().toISOString(),\n      rating: 'novote',\n      publishedDate: extracted.publishedDate,\n      tags: extracted.tags || [],\n      doi: extracted.doi,\n      journalName: extracted.journalName,\n      sourceType: sourceType\n    };\n  }\n}\n\n// Export a singleton instance that can be used by both background and content scripts\nexport const arxivIntegration = new ArXivIntegration();\n","// extension/source-integration/openreview/index.ts\n// OpenReview integration with custom metadata extractor\n\nimport { BaseSourceIntegration } from '../base-source';\nimport { PaperMetadata } from '../../papers/types';\nimport { MetadataExtractor, createMetadataExtractor, ExtractedMetadata } from '..//metadata-extractor';\nimport { loguru } from '../../utils/logger';\n\nconst logger = loguru.getLogger('openreview-integration');\n\n/**\n * Custom metadata extractor for OpenReview pages\n */\nclass OpenReviewMetadataExtractor extends MetadataExtractor {\n  /**\n   * Extract metadata from OpenReview pages\n   */\n  public extract(): ExtractedMetadata {\n    // First try to extract using standard methods\n    const baseMetadata = super.extract();\n    \n    try {\n      // Get title from OpenReview-specific elements\n      const title = this.document.querySelector('.citation_title')?.textContent || \n                   this.document.querySelector('.forum-title h2')?.textContent;\n      \n      // Get authors\n      const authorElements = Array.from(this.document.querySelectorAll('.forum-authors a'));\n      const authors = authorElements\n        .map(el => el.textContent)\n        .filter(Boolean)\n        .join(', ');\n      \n      // Get abstract\n      const abstract = this.document.querySelector('meta[name=\"citation_abstract\"]')?.getAttribute('content') ||\n                     Array.from(this.document.querySelectorAll('.note-content-field'))\n                       .find(el => el.textContent?.includes('Abstract'))\n                       ?.nextElementSibling?.textContent;\n      \n      // Get publication date\n      const dateText = this.document.querySelector('.date.item')?.textContent;\n      let publishedDate = '';\n      if (dateText) {\n        const dateMatch = dateText.match(/Published: ([^,]+)/);\n        if (dateMatch) {\n          publishedDate = dateMatch[1];\n        }\n      }\n      \n      // Get DOI if available\n      const doi = this.document.querySelector('meta[name=\"citation_doi\"]')?.getAttribute('content') || '';\n      \n      // Get conference/journal name\n      const venueElements = this.document.querySelectorAll('.forum-meta .item');\n      let venue = '';\n      for (let i = 0; i < venueElements.length; i++) {\n        const el = venueElements[i];\n        if (el.querySelector('.glyphicon-folder-open')) {\n          venue = el.textContent?.trim() || '';\n          break;\n        }\n      }\n      \n      // Get tags/keywords\n      const keywordsElement = Array.from(this.document.querySelectorAll('.note-content-field'))\n        .find(el => el.textContent?.includes('Keywords'));\n      let tags: string[] = [];\n      if (keywordsElement) {\n        const keywordsValue = keywordsElement.nextElementSibling?.textContent;\n        if (keywordsValue) {\n          tags = keywordsValue.split(',').map(tag => tag.trim());\n        }\n      }\n      \n      return {\n        title: title || baseMetadata.title,\n        authors: authors || baseMetadata.authors,\n        description: abstract || baseMetadata.description,\n        publishedDate: publishedDate || baseMetadata.publishedDate,\n        doi: doi || baseMetadata.doi,\n        journalName: venue || baseMetadata.journalName,\n        tags: tags.length ? tags : baseMetadata.tags,\n        url: this.url\n      };\n    } catch (error) {\n      logger.error('Error during OpenReview-specific extraction', error);\n      return baseMetadata;\n    }\n  }\n}\n\n/**\n * OpenReview integration with custom metadata extraction\n */\nexport class OpenReviewIntegration extends BaseSourceIntegration {\n  readonly id = 'openreview';\n  readonly name = 'OpenReview';\n  \n  // URL patterns for papers\n  readonly urlPatterns = [\n    /openreview\\.net\\/forum\\?id=([a-zA-Z0-9]+)/,\n    /openreview\\.net\\/pdf\\?id=([a-zA-Z0-9]+)/\n  ];\n  \n  // Content script matches\n  readonly contentScriptMatches = [\n    \"*://*.openreview.net/*\"\n  ];\n\n  /**\n   * Extract paper ID from URL\n   */\n  extractPaperId(url: string): string | null {\n    for (const pattern of this.urlPatterns) {\n      const match = url.match(pattern);\n      if (match) {\n        return match[1]; // The capture group with the paper ID\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Create a custom metadata extractor for OpenReview\n   */\n  protected createMetadataExtractor(document: Document): MetadataExtractor {\n    return new OpenReviewMetadataExtractor(document);\n  }\n\n  /**\n   * Extract metadata from page\n   * Override parent method to handle OpenReview-specific extraction\n   */\n  async extractMetadata(document: Document, paperId: string): Promise<PaperMetadata | null> {\n    logger.info(`Extracting metadata for OpenReview ID: ${paperId}`);\n    \n    // Extract metadata using our custom extractor\n    const metadata = await super.extractMetadata(document, paperId);\n    \n    if (metadata) {\n      // Add any OpenReview-specific metadata processing here\n      logger.debug('Extracted metadata from OpenReview page');\n      \n      // Check if we're on a PDF page and adjust metadata accordingly\n      if (document.location.href.includes('/pdf?id=')) {\n        metadata.sourceType = 'pdf';\n      }\n    }\n    \n    return metadata;\n  }\n}\n\n// Export a singleton instance that can be used by both background and content scripts\nexport const openReviewIntegration = new OpenReviewIntegration();\n","// extension/source-integration/registry.ts\n// Central registry for all source integrations\n\nimport { SourceIntegration } from './types';\nimport { arxivIntegration } from './arxiv';\nimport { openReviewIntegration } from './openreview';\n// Import any other integrations here\n\n/**\n * Registry of all available source integrations\n * This is the SINGLE place where integrations need to be added\n */\nexport const sourceIntegrations: SourceIntegration[] = [\n  arxivIntegration,\n  openReviewIntegration,\n  // Add new integrations here\n];\n\n/**\n * Get all available source integrations\n */\nexport function getAllIntegrations(): SourceIntegration[] {\n  return sourceIntegrations;\n}\n\n/**\n * Get a specific integration by ID\n */\nexport function getIntegrationById(id: string): SourceIntegration | undefined {\n  return sourceIntegrations.find(integration => integration.id === id);\n}\n\n/**\n * Get all content script match patterns from all integrations\n */\nexport function getAllContentScriptMatches(): string[] {\n  return sourceIntegrations.flatMap(integration => integration.contentScriptMatches);\n}\n","// background.ts\n// Background script with simplified session tracking\n\nimport { GitHubStoreClient } from 'gh-store-client';\nimport { PaperManager } from './papers/manager';\nimport { SessionService } from './utils/session-service';\nimport { PopupManager } from './utils/popup-manager';\nimport { SourceIntegrationManager } from './source-integration/source-manager';\nimport { loguru } from './utils/logger';\nimport { PaperMetadata } from './papers/types';\n\n// Import from central registry instead of individual integrations\nimport { sourceIntegrations } from './source-integration/registry';\nimport { Message } from './source-integration/types';\n\nconst logger = loguru.getLogger('background');\n\n// Global state\nlet githubToken = '';\nlet githubRepo = '';\nlet paperManager: PaperManager | null = null;\nlet sessionService: SessionService | null = null;\nlet popupManager: PopupManager | null = null;\nlet sourceManager: SourceIntegrationManager | null = null;\n\n// Initialize sources\nfunction initializeSources() {\n  sourceManager = new SourceIntegrationManager();\n  \n  // Register all sources from the central registry\n  for (const integration of sourceIntegrations) {\n    sourceManager.registerSource(integration);\n  }\n  \n  logger.info('Source manager initialized with integrations:', \n    sourceIntegrations.map(int => int.id).join(', '));\n  \n  return sourceManager;\n}\n\n// Initialize everything\nasync function initialize() {\n  try {\n    // Initialize sources first\n    initializeSources();\n    \n    // Load GitHub credentials\n    const items = await chrome.storage.sync.get(['githubToken', 'githubRepo']);\n    githubToken = items.githubToken || '';\n    githubRepo = items.githubRepo || '';\n    logger.info('Credentials loaded', { hasToken: !!githubToken, hasRepo: !!githubRepo });\n    \n    // Initialize paper manager if we have credentials\n    if (githubToken && githubRepo) {\n      const githubClient = new GitHubStoreClient(githubToken, githubRepo);\n      \n      // Pass the source manager to the paper manager\n      paperManager = new PaperManager(githubClient, sourceManager!);\n      logger.info('Paper manager initialized');\n      \n      // Initialize session service with paper manager\n      sessionService = new SessionService(paperManager);\n    } else {\n      // Initialize session service without paper manager\n      sessionService = new SessionService(null);\n    }\n    \n    logger.info('Session service initialized');\n    \n    // Initialize popup manager\n    popupManager = new PopupManager(\n      () => sourceManager,\n      () => paperManager\n    );\n    logger.info('Popup manager initialized');\n    \n    // Set up message listeners\n    setupMessageListeners();\n    \n    // Initialize debug objects\n    initializeDebugObjects();\n  } catch (error) {\n    logger.error('Initialization error', error);\n  }\n}\n\n// Set up message listeners\nfunction setupMessageListeners() {\n  chrome.runtime.onMessage.addListener((message: any, sender, sendResponse) => {\n    if (message.type === 'contentScriptReady' && sender.tab?.id) {\n      logger.debug('Content script ready:', sender.tab.url);\n      sendResponse({ success: true });\n      return true;\n    }\n    \n    if (message.type === 'paperMetadata' && message.metadata) {\n      // Store metadata received from content script\n      handlePaperMetadata(message.metadata);\n      sendResponse({ success: true });\n      return true;\n    }\n    \n    if (message.type === 'getCurrentPaper') {\n      const session = sessionService?.getCurrentSession();\n      const paperMetadata = session \n        ? sessionService?.getPaperMetadata(session.sourceId, session.paperId)\n        : null;\n      \n      logger.debug('Popup requested current paper', paperMetadata);\n      sendResponse(paperMetadata);\n      return true;\n    }\n    \n    if (message.type === 'updateRating') {\n      logger.debug('Rating update requested:', message.rating);\n      handleUpdateRating(message.rating, sendResponse);\n      return true; // Will respond asynchronously\n    }\n    \n    if (message.type === 'startSession') {\n      handleStartSession(message.sourceId, message.paperId);\n      sendResponse({ success: true });\n      return true;\n    }\n    \n    if (message.type === 'sessionHeartbeat') {\n      handleSessionHeartbeat();\n      sendResponse({ success: true });\n      return true;\n    }\n    \n    if (message.type === 'endSession') {\n      handleEndSession(message.reason || 'user_action');\n      sendResponse({ success: true });\n      return true;\n    }\n\n    // New handler for manual paper logging from popup\n    if (message.type === 'manualPaperLog' && message.metadata) {\n      handleManualPaperLog(message.metadata)\n        .then(() => sendResponse({ success: true }))\n        .catch(error => {\n          logger.error('Error handling manual paper log', error);\n          sendResponse({ \n            success: false, \n            error: error instanceof Error ? error.message : 'Unknown error' \n          });\n        });\n      return true; // Will respond asynchronously\n    }\n    \n    // Other message handlers are managed by PopupManager\n    \n    return false; // Not handled\n  });\n}\n\n// Handle paper metadata from content script\nasync function handlePaperMetadata(metadata: PaperMetadata) {\n  logger.info(`Received metadata for ${metadata.sourceId}:${metadata.paperId}`);\n  \n  try {\n    // Store metadata in session service\n    if (sessionService) {\n      sessionService.storePaperMetadata(metadata);\n    }\n    \n    // Store in GitHub if we have a paper manager\n    if (paperManager) {\n      await paperManager.getOrCreatePaper(metadata);\n      logger.debug('Paper metadata stored in GitHub');\n    }\n  } catch (error) {\n    logger.error('Error handling paper metadata', error);\n  }\n}\n\n// Handle rating update\nasync function handleUpdateRating(rating: string, sendResponse: (response: any) => void) {\n  if (!paperManager || !sessionService) {\n    sendResponse({ success: false, error: 'Services not initialized' });\n    return;\n  }\n\n  const session = sessionService.getCurrentSession();\n  if (!session) {\n    sendResponse({ success: false, error: 'No current session' });\n    return;\n  }\n\n  const metadata = sessionService.getPaperMetadata();\n  if (!metadata) {\n    sendResponse({ success: false, error: 'No paper metadata available' });\n    return;\n  }\n\n  try {\n    await paperManager.updateRating(\n      session.sourceId,\n      session.paperId, \n      rating,\n      metadata\n    );\n    \n    // Update stored metadata with new rating\n    metadata.rating = rating;\n    \n    sendResponse({ success: true });\n  } catch (error) {\n    logger.error('Error updating rating:', error);\n    sendResponse({ success: false, error: error instanceof Error ? error.message : 'Unknown error' });\n  }\n}\n\n// Handle session start request\nfunction handleStartSession(sourceId: string, paperId: string) {\n  if (!sessionService) {\n    logger.error('Session service not initialized');\n    return;\n  }\n  \n  // Get metadata if available\n  const existingMetadata = sessionService.getPaperMetadata(sourceId, paperId);\n  \n  // Start the session\n  sessionService.startSession(sourceId, paperId, existingMetadata);\n  logger.info(`Started session for ${sourceId}:${paperId}`);\n}\n\n// Handle session heartbeat\nfunction handleSessionHeartbeat() {\n  if (!sessionService) {\n    logger.error('Session service not initialized');\n    return;\n  }\n  \n  sessionService.recordHeartbeat();\n}\n\n// Handle session end request\nfunction handleEndSession(reason: string) {\n  if (!sessionService) {\n    logger.error('Session service not initialized');\n    return;\n  }\n  \n  const session = sessionService.getCurrentSession();\n  if (session) {\n    logger.info(`Ending session: ${reason}`);\n    sessionService.endSession();\n  }\n}\n\nasync function handleManualPaperLog(metadata: PaperMetadata): Promise<void> {\n  logger.info(`Received manual paper log: ${metadata.sourceId}:${metadata.paperId}`);\n  \n  try {\n    // Store metadata in session service\n    if (sessionService) {\n      sessionService.storePaperMetadata(metadata);\n    }\n    \n    // Store in GitHub if we have a paper manager\n    if (paperManager) {\n      await paperManager.getOrCreatePaper(metadata);\n      logger.debug('Manually logged paper stored in GitHub');\n    }\n  } catch (error) {\n    logger.error('Error handling manual paper log', error);\n    throw error;\n  }\n}\n\n// Listen for credential changes\nchrome.storage.onChanged.addListener(async (changes) => {\n  logger.debug('Storage changes detected', Object.keys(changes));\n  \n  if (changes.githubToken) {\n    githubToken = changes.githubToken.newValue;\n  }\n  if (changes.githubRepo) {\n    githubRepo = changes.githubRepo.newValue;\n  }\n  \n  // Reinitialize paper manager if credentials changed\n  if (changes.githubToken || changes.githubRepo) {\n    if (githubToken && githubRepo) {\n      const githubClient = new GitHubStoreClient(githubToken, githubRepo);\n      \n      // Pass the source manager to the paper manager\n      paperManager = new PaperManager(githubClient, sourceManager!);\n      logger.info('Paper manager reinitialized');\n      \n      // Reinitialize session service with new paper manager\n      sessionService = new SessionService(paperManager);\n      logger.info('Session service reinitialized');\n    }\n  }\n});\n\n// Initialize debug objects in service worker scope\nfunction initializeDebugObjects() {\n  // @ts-ignore\n  self.__DEBUG__ = {\n    get paperManager() { return paperManager; },\n    get sessionService() { return sessionService; },\n    get popupManager() { return popupManager; },\n    get sourceManager() { return sourceManager; },\n    getGithubClient: () => paperManager ? paperManager.getClient() : null,\n    getCurrentPaper: () => {\n      const session = sessionService?.getCurrentSession();\n      return session ? sessionService?.getPaperMetadata(session.sourceId, session.paperId) : null;\n    },\n    getSessionStats: () => sessionService?.getSessionStats(),\n    getSources: () => sourceManager?.getAllSources(),\n    forceEndSession: () => sessionService?.endSession()\n  };\n\n  logger.info('Debug objects registered');\n}\n\n// Initialize extension\ninitialize();\n"],"names":["logger","GitHubStoreClient"],"mappings":"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"}